events {
        #déclare les connexions simultanées maximales que chaque processus worker peut gérer.
        #Par défaut, 1024 est une valeur standard pour un usage local ou de faible charge.
    worker_connections 1024;
}

http {
    server {
        #listen 8080 : Correct. Cela configure le serveur pour écouter sur le port 8080.
        #server_name localhost : Correct pour un usage local. Si ce serveur est déployé publiquement,
        #il faudra remplacer localhost par un domaine approprié.
        listen 8080;
        server_name localhost;

        root /usr/share/nginx/html;
        # Public service
        location /public {
            proxy_pass http://public-service:3000/;
        }

        # Restaurants service
        location /restaurants {
            proxy_pass http://restaurants-service:3000/;
        }

        # Article service
        location /articles {
            proxy_pass http://articles-service:3000/;
        }

        # Menu service
        location /menus {
            proxy_pass http://menus-service:3000/;
        }

        # Commandes service
        location /commandes {
            proxy_pass http://commandes-service:3000/;
        }

        # Livraisons service
        location /livraisons {
            proxy_pass http://livraisons-service:3000/;
        }

        # paiements service
        location /paiements {
            proxy_pass http://paiements-service:3000/;
        }

        # Private service
        location /private {
            auth_request /authenticate;
            auth_request_set $auth_status $upstream_status;
            auth_request_set $user_role $upstream_http_x_user_role;
            proxy_set_header X-User-Role $user_role;
            proxy_pass http://private-service:3000/;
        }

        location /authenticate {
        #if ($request_method = OPTIONS) : Cette condition gère les requêtes OPTIONS, généralement utilisées pour la vérification des permissions lors des requêtes
        # CORS (Cross-Origin Resource Sharing). Cela renvoie une réponse vide avec le statut 204 (No Content).
        #internal : Cela signifie que l'URI /authenticate ne peut être appelé que depuis une autre directive 
        #ou un script interne,
        # et non directement par un client externe. Vérifiez si cela est intentionnel.
        #proxy_pass_request_body off; et proxy_set_header Content-Length ""; :
        #Vous indiquez que le corps de la requête ne doit pas être transmis à l'API.
        #proxy_pass :La requête est bien dirigée vers http://auth-service:3000/authenticate.

            if ($request_method = OPTIONS) {
                return 204;
            }

            #internal; empêche un accès direct :

            #Si vous essayez d'accéder directement à http://localhost:8080/authenticate depuis un client externe, 
            #vous recevrez une erreur 404 Not Found. internal; est une mesure de sécurité pour restreindre une route à un usage interne dans NGINX.
            #Si vous voulez permettre des tests externes (par exemple, avec Postman), vous devrez temporairement retirer cette directive.

           # internal;

            # indique à NGINX de ne pas transmettre le corps de la requête HTTP au backend. Exemple:
            #Vous avez une requête OPTIONS (souvent utilisée pour les vérifications CORS) qui n'a pas besoin d'envoyer de corps.
            proxy_pass_request_body off;
            #réinitialise l'en-tête Content-Length de la requête HTTP à une chaîne vide. En combinaison avec proxy_pass_request_body off;,
            # elle indique que la requête n'a pas de corps.
            proxy_set_header Content-Length "";
            #Cette directive ajoute un en-tête personnalisé X-Original-URI à la requête envoyée au backend.
            #La valeur de cet en-tête sera l'URI original de la requête (par exemple, /authenticate, /login, etc.), 
            #qui est stocké dans la variable NGINX $request_uri.
            proxy_set_header X-Original-URI $request_uri;
            #Resumé:
            
            #Prenons une requête à http://localhost:8080/authenticate :

            #Vous envoyez une requête avec un body JSON (par exemple, POST /authenticate).
            #NGINX :Ne transmet pas le corps de la requête au backend (proxy_pass_request_body off;),
            #Définit l'en-tête Content-Length à une chaîne vide (proxy_set_header Content-Length "";),
            #Ajoute un en-tête personnalisé X-Original-URI: /authenticate pour indiquer l'URI initial de la requête.

            proxy_pass http://auth-service:3000/authenticate;
        }
        #Ces directives redirigent les requêtes vers les endpoints correspondants de l'API.

        location /login {
            proxy_pass http://auth-service:3000/login;
        }

        location /register {
            proxy_pass http://auth-service:3000/register;
        }
         location /refreshToken {
            proxy_pass http://auth-service:3000/refreshToken;
        }
    }
}